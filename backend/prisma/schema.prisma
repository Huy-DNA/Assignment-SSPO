// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String    @id @default(uuid())
  role    UserRole
  name    String
  manager Manager?
  student Student?
  session Session[]
}

model Manager {
  id   String @id
  user User   @relation(fields: [id], references: [id])
}

model Student {
  id          String        @id
  user        User          @relation(fields: [id], references: [id])
  paperNo     Int           @default(0)
  file        File[]
  Transaction Transaction[]
  PrinterJob  PrinterJob[]
  Feedback    Feedback[]
}

model Session {
  id     String @id
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model File {
  id         String       @id @default(uuid())
  userId     String
  user       Student      @relation(fields: [userId], references: [id])
  name       String
  uploadedAt DateTime     @default(now())
  content    String
  PrinterJob PrinterJob[]
}

model Printer {
  id          String       @id @default(uuid())
  code        String       @unique
  name        String
  campus      String
  building    String
  room        Int
  brand       String?
  enabled     Boolean      @default(true)
  isDeleted   Boolean      @default(true)
  description String?
  jobs        PrinterJob[]
}

model PrinterJob {
  id            String           @id @default(uuid())
  printerId     String
  printer       Printer          @relation(fields: [printerId], references: [id])
  userId        String
  user          Student          @relation(fields: [userId], references: [id])
  fileId        String
  file          File             @relation(fields: [fileId], references: [id])
  report        Report?          @relation(fields: [reportId], references: [id])
  reportId      String?
  status        PrinterJobStatus
  oneSided      Boolean
  estimatedTime Float
  createdAt     DateTime
  copiesNo      Int
  startPage     Int
  endPage       Int
}

model Transaction {
  id        String   @id @default(uuid())
  userId    String
  user      Student  @relation(fields: [userId], references: [id])
  paperNo   Int
  price     Float
  createdAt DateTime
  report    Report?  @relation(fields: [reportId], references: [id])
  reportId  String?
  success   Boolean
}

model Report {
  id           String        @id @default(uuid())
  week         Int?
  year         Int
  transactions Transaction[]
  printer_jobs PrinterJob[]
}

model Feedback {
  id       String   @id @default(uuid())
  postedAt DateTime @default(now())
  userId   String
  user     Student  @relation(fields: [userId], references: [id])
  content  String
}

enum UserRole {
  Manager
  Student
}

enum PrinterJobStatus {
  Waiting
  Printing
  Done
  Aborted
}
